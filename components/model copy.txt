import {
  OrbitControls,
  useAnimations,
  useFBX,
  useTexture,
} from "@react-three/drei";
import { useEffect, useCallback, useState } from "react";
import { useLoader } from "@react-three/fiber";
import { FBXLoader } from "three/examples/jsm/loaders/FBXLoader";
import { MeshPhongMaterial } from "three/src/Three";

const model = () => {
  const [animate, setAnimate] = useState<boolean>(false);

  // Check Keyboard Press on P to play/pause animation
  const handleAnimate = useCallback(
    async (event) => {
      const { keyCode } = await event;
      if (keyCode === 80) {
        setAnimate(!animate);
      }
    },
    [animate]
  );

  // Load Model
  const fbx = useLoader(FBXLoader, "./ASSASSIN_07.fbx");

  // Load Textures
  const Body = useTexture([
    "./Emission.png",
    "./AlbedoTransparency.png",
    "./MetallicSmoothness.png",
    "./Normal.png",
  ]);

  // Create Materials
  let new_mtl;
  new_mtl = new MeshPhongMaterial({
    emissiveMap: Body[0],
    map: Body[1],
    normalMap: Body[3],
    aoMap: Body[2],
  });

  const INITIAL_MAP = [{ mtl: new_mtl }];

  // Function to apply texture
  const initTexture = (parent, mtl) => {
    parent.traverse((o) => {
      if (o.isMesh) {
        o.material = mtl;
      }
    });
  };

  // Apply Texture
  if (fbx) {
    for (let object of INITIAL_MAP) {
      initTexture(fbx, object.mtl);
    }
  }

  // Load Animation
  const fbx2 = useFBX("./test_anim.fbx");

  // Apply Animation
  const { animations } = fbx2;
  const { actions, names } = useAnimations(animations, fbx);

  // Conditionally play or pause animation
  {
    animate
      ? actions[names[names.length - 1]].play()
      : actions[names[names.length - 1]].stop();
  }

  // Detect input change
  useEffect(() => {
    window.addEventListener("keydown", handleAnimate);

    return () => {
      window.removeEventListener("keydown", handleAnimate);
    };
  }, [handleAnimate, animate]);

  return (
    <>
      <group position={[0, -75, 0]}>
        <primitive object={fbx} />
        <OrbitControls
          enablePan={false}
          enableZoom={true}
          enableRotate={true}
        />
      </group>
    </>
  );
};

export default model;
